load "medit"

ofstream gnu("gamma and E.txt");

real uMax = 5.;

real Mu = 0.4;

func fx = 0.;
func fy = 0.;

real D = 8.;	//Pipe height
int Wall = 1;	//Pipe wall label
int Inlet = 2;	//Pipe inlet label
int Outlet = 3;	//Pipe outlet label

border C1(t=0, 8.) {x=t; y=0; label=1;};
border C2(t=0, 3.) {x=8.; y=t; label=1;};
border C3(t=8., 12.) {x=t; y=3.; label=1;};
border C4(t=0, 3.) {x=12.; y=3.-t; label=1;};
border C5(t=12., 20.) {x=t; y=0; label=1;};
border C6(t=0, 8.) {x=20.; y=t; label=3;};
border C7(t=0, 8.) {x=20.-t; y=8.; label=1;};
border C8(t=0, 3.) {x=12.; y=8.-t; label=1;};
border C9(t=0, 4.) {x=12.-t; y=5.; label=1;};
border C10(t=5., 8.) {x=8.; y=t; label=1;};
border C11(t=0, 8.) {x=8.-t; y=8.; label=1;};
border C12(t=0, 8.) {x=0; y=8.-t; label=2;};

mesh Th = buildmesh (C1(25) + C2(7) + C3(12) + C4(7) + C5(25) + C6(25) 
		   + C7(25) + C8(7) + C9(12) + C10 (7) + C11(25) + C12(25));



medit("domain", Th);

real a = 0.92, b = 18.7, k = 0.1, ka = 0.01, gamma = 0.000001, beta = 0.25, A = 1;
real ks = k - ka;
real alpha = 1 / (3 * k - A * ks);
real E;


fespace Vh(Th,P1);
Vh eta, theta, phi, xi, bigtheta, theta0;

fespace Uh(Th, [P1, P1]);
Uh [ux, uy];
Uh [vx, vy];

fespace Wh(Th, P1);
Wh uA;

fespace Ph(Th, P1);
Ph p;
Ph q;

//Macro
macro Gradient(u) [dx(u), dy(u)] //
macro Divergence(ux, uy) (dx(ux) + dy(uy)) //

//Function
func uIn = uMax * (1.-(y-D/2.)^2/(D/2.)^2);

//Problem
problem S ([ux, uy, p],[vx, vy, q])
	= int2d(Th)
	(
		  Mu * (
			  Gradient(ux)' * Gradient(vx)
			+ Gradient(uy)' * Gradient(vy)
			)
		- p * Divergence(vx, vy)
		- Divergence(ux, uy) * q
	)
	- int2d(Th)(
		  fx*vx + fy*vy
		   )
	+ on(Inlet, Outlet, ux=uIn, uy=0.)
	+ on(Wall, ux=0., uy=0.)
	;

S;

uA=sqrt(ux*ux+uy*uy);

bigtheta = 1;
//int ni = 20;

theta0 = 0;
real lambda = 0.5;

for(int j=0; j<25; j++){

	for(int i=0; i<15; i++){

	solve Poisson([theta, phi],[eta, xi]) = int2d(Th)(a*dx(theta)*dx(eta)+a*dy(theta)*dy(eta))
		   + int2d(Th)(ux * dx(theta) * eta) + int2d(Th)(uy * dy(theta) * eta) + int2d(Th)(b * ka * theta0^3 * theta * eta) - int2d(Th)(b * ka * phi * eta) 
		   + int1d(Th,1)(gamma*theta*eta) - int1d(Th,1)(gamma*bigtheta*eta) 
		   + int1d(Th,2)(1*theta*eta) - int1d(Th,2)(1*0.3*eta) 
		   + int1d(Th,3)(1*theta*eta) - int1d(Th,3)(1*0.8*eta) 
		   + int2d(Th)(alpha*dx(phi)*dx(xi)+a*dy(phi)*dy(xi)) + int2d(Th)(ka * phi * xi) - int2d(Th)(ka * theta * theta0^3 * xi)
 		   + int1d(Th,1)(beta*phi*xi) - int1d(Th,1)(beta*bigtheta^4*xi)
		   + int1d(Th,3,2)(beta*phi*xi);
	theta0 = (1-lambda)*theta0 + lambda*theta;
	cout << endl << "i = " << i << endl;
				}
//ni = 20;

E = int1d(Th,3)(gamma*(theta-0.8)+theta*ux+b*beta*(phi-0.4096));
cout << endl << "****** E=    " << E;
cout << endl << "****** gamma=" << gamma << endl;

gnu << gamma << " " << E << endl;

gamma = gamma*(sqrt(10));

plot(theta,wait=0,value=true,fill=true);
}


