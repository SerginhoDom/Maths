load "medit" 

border C1 (t = 0, 50) {x = t; y = 0; label = 3;}
border C4 (t = 0, 10) {x = 50; y = t; label = 2;}
border C2 (t = 50, 0) {x = t; y = 10; label = 3;}
border C3 (t = 10, 0) {x = 0; y = t; label = 1;}


mesh Th = buildmesh (C1(100) + C2(100) + C3(20) + C4(20));

medit("mesh", Th, wait = 1);

fespace Vh(Th,P1);
Vh tetta, atta, prevTetta;
Vh phi, psi, prevPhi;
fespace Kh(Th, P0);
Kh Energy, Energy1;

// Constants 
int n = 10;
real ka = 0.001, sigma = 5.6704, refractiveIndex = 0.5, TMax = 500, A = 1;
//real k = ks - ka;
real k = 0.1;
//real a = k / (p * cv);
real a = 0.92;
//real b = 4*sigma*(refractiveIndex^2)*(TMax^3)/(p*cv);
real b =  18.7;
//real alpha = 1 / (3k - A*ks);
real alpha = 3.33;
real[int] v = [(9.0), (0.0)];
real[int] nVector = [(1.0), (0.0)]; // спросить что такое н.

func real BigTetta(int boundary)
{
    if (boundary == 1)
    {
        return 0.3;
    }
    if (boundary == 2) 
    {
        return 0.8;
    }

    return 1;
}

real Gamma = 1000;
real Betta = 0.0001;
real epsilon = 0.7;
real parametrAlpha = 0.5;

prevTetta = 0;
phi = 0;
for (int k = 0; k <= n; k++)
{
    solve Poisson(tetta, atta) = 
        int2d(Th)(a*dx(tetta)*dx(atta) + a*dy(tetta)*dy(atta))
        + int2d(Th)(v[0]*dx(tetta)*atta + v[1]*dy(tetta)*atta)
        + int2d(Th)(b*ka*prevTetta^4*atta)
        - int2d(Th)(phi*atta)

        + int1d(Th, 1)(Gamma*tetta*atta)
        - int1d(Th, 1)(Gamma*BigTetta(1)*atta)

        + int1d(Th, 2)(Gamma*tetta*atta)
        - int1d(Th, 2)(Gamma*BigTetta(2)*atta)
        
        + int1d(Th, 3)(Gamma*tetta*atta)
        - int1d(Th, 3)(Gamma*atta);

    solve Poisso(phi, psi) = 
        int2d(Th)(alpha*(dx(phi)*dx(psi) + dy(phi)*dy(psi)))

        + int2d(Th)(ka*phi*psi)
        - int2d(Th)(ka* tetta^4 *psi)

        + int1d(Th, 1)(Betta*phi*psi)
        - int1d(Th, 1)(Betta*(BigTetta(1))^4*psi)

        + int1d(Th, 2)(Betta*phi*psi)
        - int1d(Th, 2)(Betta*(BigTetta(2))^4*psi)

        + int1d(Th, 3)(epsilon/(2*(2 - epsilon))*phi*psi)
        - int1d(Th, 3)(epsilon/(2*(2 - epsilon))*psi);

    //plot(tetta, wait=0, value = true, fill = true);
    //if (k == n-1)
   // {
        //plot(tetta, wait=true, value = true, fill = true);
    //}
    prevTetta = parametrAlpha*tetta + (1 - parametrAlpha)*prevTetta;
}

//change by Gamma
real[int] EnArray(100);
real[int] GammeArray(100);
real p = 0.0000001;
ofstream gamma("gamma.txt");
ofstream gammaEn("gamma_en.txt");
for (int i = 0; i < 25; i++)
{
    gamma << p << ", ";
    GammeArray[i] = p;
    p *= 10;
    real En = int1d(Th, 2)(GammeArray[i]*tetta)
        -int1d(Th, 2)(GammeArray[i]*BigTetta(2))

        +int1d(Th, 2)(tetta*9)

        +int1d(Th, 2)(b*Betta*phi)
        -int1d(Th, 2)(b*Betta*BigTetta(2)^4);

    EnArray[i] = En;
    gammaEn << En << ", ";
}
//plot([GammeArray, EnArray], wait=true);



//tetta = (y<9.9)*(x<0.5)*(-0.39)+(y<0.1)*(x>49.9)*1.5+(x>=0.5)*(x<=49.9)*tetta+(x<0.5)*(y>=0.1)*(y<=9.9)*tetta;
plot(tetta, wait=0, fill=true, value=true);